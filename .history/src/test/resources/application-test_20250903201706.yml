spring:
  application:
    name: cash-flow-management-service-test
  
  datasource:
    # Will be overridden by TestContainers for SQL Server
    url: jdbc:sqlserver://localhost:1433;databaseName=cashflow_test;encrypt=true;trustServerCertificate=true
    username: sa
    password: TestPassword123!
    driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.SQLServerDialect
        format_sql: true
        jdbc:
          batch_size: 20
          fetch_size: 20
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
  
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.xml
    contexts: test
    default-schema: cashflow
  
  cache:
    type: redis
    redis:
      host: localhost
      port: 6379
      password: 
      database: 1
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 5
          min-idle: 2
          max-wait: -1ms
  
  kafka:
    bootstrap-servers: localhost:9094
    consumer:
      group-id: cash-flow-service-test-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        spring.json.add.type.headers: false
        spring.json.type.mapping: cashflow:com.financial.cashflow.domain.event.CashFlowEvent,settlement:com.financial.cashflow.domain.event.SettlementEvent

server:
  port: 0  # Random port for testing

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.financial.cashflow: DEBUG
    org.springframework.kafka: WARN
    org.hibernate.SQL: WARN
    org.springframework.cache: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} -- %msg%n"
