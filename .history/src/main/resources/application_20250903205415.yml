spring:
  application:
    name: cash-flow-management-service
  
  # Database Configuration
  datasource:
    url: jdbc:sqlserver://localhost:1433;databaseName=cashflow_db;encrypt=true;trustServerCertificate=true
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:YourStrong@Passw0rd}
    driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.SQLServerDialect
        format_sql: true
        jdbc:
          batch_size: 50
          fetch_size: 50
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
  
  # Liquibase Migration
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.xml
    contexts: ${LIQUIBASE_CONTEXTS:}
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: -1ms
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: cash-flow-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        spring.json.add.type.headers: false
        spring.json.type.mapping: cashflow:com.financial.cashflow.domain.event.CashFlowEvent,settlement:com.financial.cashflow.domain.event.SettlementEvent

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# Logging Configuration
logging:
  level:
    com.financial.cashflow: INFO
    org.springframework.kafka: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Cash Flow Service Configuration
cashflow:
  calculation:
    default-ttl: 30m
    max-retries: 3
    retry-delay: 1s
    batch-size: 100
    enable-caching: true
    cache-ttl: 30m
  
  settlement:
    default-ttl: 24h
    max-retries: 5
    retry-delay: 5s
    enable-notifications: true
  
  messaging:
    topics:
      cashflow-events: cashflow.events
      settlement-events: settlement.events
      audit-events: audit.events
    enable-events: true
  
  performance:
    max-concurrent-calculations: 50
    calculation-timeout: 60s
    settlement-timeout: 30s

# Profiles
---
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    show-sql: true
  kafka:
    consumer:
      auto-offset-reset: earliest

---
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  flyway:
    enabled: false
  cache:
    type: simple
  kafka:
    bootstrap-servers: localhost:9092

---
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
  logging:
    level:
      com.financial.cashflow: WARN
      org.springframework.kafka: ERROR
  kafka:
    consumer:
      auto-offset-reset: latest
